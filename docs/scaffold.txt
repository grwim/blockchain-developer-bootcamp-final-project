pragma solidity ^0.8.0;

// responsible for generating new InsuranceContracts
// will fund each generated insurance contract with enough ETH and LINK so that once generated, each insurance contract can perform all required operations throughout their
contract InsuranceFactory { 

    modifier onContractActive() {
        // checks that a given InsuranceContract is still active
        _
    }

    /// @notice stores insurance contracts
    mapping (address => InsuranceContract) contracts;

    /// @notice initializes the Chainlink ETH/USD price feed
    constructor() {
        priceFeed = AggregatorV3Interface(0x9326BFA02ADD2366b30bacB125260Af641031331);
    }

    /// @notice creates new InsuranceContract from required inputs and sends an amount of ETH equal to the payout value, so that the contract is fully funded 
    /// @param _client
    /// @param _drought_threshold
    /// @param _duration
    /// @param _premium
    /// @param _payoutValue
    /// @param _cropLocation
    /// @returns address 
    createContract(address _client, uint _drought_threshold, uint _duration, uint _premium, _payoutValue, string _cropLocation) public payable onlyOwner() returns(address) {
        
        // create contract, send payout amount so fully funded (ETH)

        // add conntract to Map of contracts 

        // emit event

        // fund contract with enough LINK tokens to fund oracle calls for duration (1/day + buffer)
        
        // double check math for link amount 
        // link_amount = ((_duration.div(DAY_IN_SECONDS)) + 2) * ORACLE_PAYMENT.mul(2);
    }

    /// @notice gets rainfall of the contract (from oracle)
    getContractRainfall(address _contractAddress) {
    }

    /// @notice gets number of getContractRainfall requests, used to validate enough calls have been made
    getContractRequestCount(address _contractAddress) {
    }

    /// @notice attempts to update state of specified contract; checks if a payment threshold has been triggered, or the contract period has ended 
    updateContract(address _contractAddress) external {
    }
}

contract InsuranceContract {

    /// @notice instantiates a new InsuranceContract
    /// @param _client
    /// @param _duration
    /// @param _drought_threshold
    /// @param _premium
    /// @param _payoutValue
    /// @param _cropLocation
    constructor(address _client, uint _drought_threshold, uint _duration, uint _premium, _payoutValue, string _cropLocation) {}

    /// @notice attempts to update state; checks if a payment threshold has been triggered, or the contract period has ended 
    updateContract() {}

    /// @notice calls Chainlink weather oracle(s) to obtain weather data for specified location
    checkRainfall() {}

    /// @notice returns number of data requests that have successfully made it back to the insurance contract
    getRequestCount() {}

    /// @notice to be called when the Chainlink weather oracle(s) send a response back. 
    /// @notice updates contract state with latest rainfall data & checks if payout condition has been met
    checkRainfallCallback() {}

    /// @notice tranfers payour amount to client, returns remaining funds (premium) back to Insurer, and marks contract as closed
    payOutContract() {}
}

